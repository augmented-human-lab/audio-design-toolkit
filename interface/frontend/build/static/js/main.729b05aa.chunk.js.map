{"version":3,"sources":["MyComponent.jsx","index.tsx"],"names":["intToFloat","num","concat","toFixed","mixpanel","init","set_config","streamlitSetComponentValue","func","timer","timeout","arguments","length","undefined","_len","args","Array","_key","clearTimeout","setTimeout","apply","debounce","newValue","label","interface_name","model_name","track","Streamlit","setComponentValue","withStreamlitConnection","props","_props$args","example","min_value","max_value","value","step","track_color","thumb_color","theme","_useState","useState","_useState2","_slicedToArray","state","setState","useEffect","setFrameHeight","snowflakeTheme","createTheme","overrides","MuiSlider","root","height","fontSize","marginBottom","fontWeight","fontFamily","font","markLabel","color","textColor","paddingLeft","markLabelActive","markActive","opacity","valueLabel","thumb","marginLeft","primaryColor","width","borderRadius","borderWidth","rail","React","createElement","Box","sx","marginRight","paddingTop","ThemeProvider","style","wordBreak","textAlign","Slider","aria-label","min","max","onChange","_","valueLabelDisplay","valueLabelFormat","f","orientation","aria-labelledby","ThumbComponent","marks","Number","String","console","log","config","ReactDOM","render","MyComponent","document","getElementById"],"mappings":"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","file":"static/js/main.729b05aa.chunk.js","sourcesContent":["import {\r\n  Streamlit,\r\n  withStreamlitConnection,\r\n} from \"streamlit-component-lib\"\r\nimport React, { useEffect, useState } from \"react\"\r\nimport Box from '@material-ui/core/Box'\r\nimport { createTheme } from '@material-ui/core/styles';\r\nimport { Slider } from \"@material-ui/core\";\r\nimport { ThemeProvider } from '@material-ui/styles';\r\nimport mixpanel from 'mixpanel-browser';\r\nmixpanel.init('12ae1c3ca5383e7c343f126061a9da67')\r\nmixpanel.set_config({'persistence': 'localStorage'});\r\n\r\nfunction isInt(n) {\r\n  return n % 1 === 0;\r\n}\r\n\r\nfunction intToFloat(num) {\r\n  return isInt(num) ? `${num > 0 ? '+' : ''}${num.toFixed(1)}` : `${num > 0 ? '+' : ''}${num}`;\r\n}\r\n\r\nconst debounce = (func, timeout = 1000) => {\r\n  let timer;\r\n  return (...args) => {\r\n    clearTimeout(timer);\r\n    timer = setTimeout(() => {\r\n      func.apply(this, args);\r\n    }, timeout);\r\n  };\r\n};\r\n\r\nconst streamlitSetComponentValue = debounce((newValue, label, interface_name, model_name) => {\r\n  // window.parent.dataLayer = window.parent.dataLayer || [];\r\n  // console.log(window.parent.dataLayer)\r\n  // function gtag() {\r\n  //   window.parent.dataLayer.push(arguments)\r\n  //   // dataLayer.push(arguments)\r\n  // }\r\n  // gtag('js', new Date());\r\n  // gtag('config', 'G-PBGSXXLQ12');\r\n  // gtag('event', 'parameter_change', {\r\n  //   'app_name': 'myAppName',\r\n  //   'screen_name': 'Home',\r\n  //   'elementId': newValue,\r\n  //   'value': newValue\r\n  // });\r\n\r\n  mixpanel.track('parameter_change', {\r\n    'app_name': interface_name,\r\n    'model_name': model_name,\r\n    'label': label,\r\n    'value': newValue\r\n  });\r\n  \r\n  return Streamlit.setComponentValue(newValue)\r\n}, 500)\r\n\r\nconst VerticalSlider = (props) => {\r\n  const { model_name, interface_name, label, example, min_value, max_value, value, step, track_color, thumb_color } = props.args;\r\n  // const [min_value, max_value, value, step, track_color, slider_color, thumb_color] = [-5, 5, 0, 0.01, \"gray\", \"red\", \"black\"];\r\n  const theme = props.theme\r\n  // const theme = {\r\n  //   font: 'Serif',\r\n  //   textColor: 'black'\r\n  // }\r\n  const [state, setState] = useState(value)\r\n  useEffect(() => Streamlit.setFrameHeight());\r\n  useEffect(() => {\r\n    setState(value)\r\n    // Streamlit.setComponentValue(value)\r\n  }, [example, value])\r\n  const handleChange = (_, newValue) => {\r\n    setState(newValue);\r\n    streamlitSetComponentValue(newValue, label, interface_name, model_name);\r\n  };\r\n\r\n  // if (state !== value) {\r\n  //   setState(value)\r\n  // }\r\n\r\n  const snowflakeTheme = createTheme({\r\n    overrides: {\r\n      MuiSlider: {\r\n        root: {\r\n          height: 200,\r\n          fontSize: 10,\r\n          marginBottom: 0,\r\n          fontWeight: 400,\r\n          fontFamily: theme.font\r\n        },\r\n        markLabel: {\r\n          color: theme.textColor,\r\n          fontFamily: theme.font,\r\n          paddingLeft: 15,\r\n          fontSize: 14\r\n        },\r\n        markLabelActive: {\r\n          color: theme.textColor,\r\n          fontFamily: theme.font,\r\n          paddingLeft: 15,\r\n          fontSize: 14\r\n        },\r\n        markActive: {\r\n          opacity: 0\r\n        },\r\n        valueLabel: {\r\n          fontFamily: theme.font,\r\n        },\r\n        thumb: {\r\n          color: thumb_color,\r\n          marginLeft: \"4px !important\"\r\n        },\r\n        track: {\r\n          color: theme.primaryColor,\r\n          width: \"10px !important\",\r\n          marginLeft: \"5px !important\",\r\n          borderRadius: 2,\r\n          marginBottom: 0,\r\n          borderWidth: 1\r\n        },\r\n        rail: {\r\n          color: track_color,\r\n          width: \"10px !important\",\r\n          marginLeft: \"5px !important\",\r\n          borderRadius: 2,\r\n          marginBottom: 0\r\n        }\r\n      }\r\n    }\r\n  });\r\n  // return <>a</>\r\n\r\n  return (\r\n    <Box sx={{ height: 200, marginRight: 10, marginLeft: 10, paddingTop: 10 }}>\r\n      <ThemeProvider theme={snowflakeTheme}>\r\n        <p style={{\r\n          wordBreak: \"break-word\",\r\n          fontSize: 14,\r\n          marginBottom: '1rem',\r\n          fontFamily: theme.font,\r\n          color: theme.textColor,\r\n          // lineHeight: '32px',\r\n          height: '32px',\r\n          textAlign: 'center'\r\n        }}>{label}</p>\r\n        <Slider\r\n          aria-label=\"Always visible\"\r\n          min={min_value}\r\n          step={step}\r\n          max={max_value}\r\n          value={state}\r\n          onChange={handleChange}\r\n          valueLabelDisplay=\"on\"\r\n          valueLabelFormat={min_value >= 0 ? f => f : intToFloat}\r\n          orientation=\"vertical\"\r\n          aria-labelledby=\"continuous-slider\"\r\n          ThumbComponent=\"span\"\r\n          marks={[{ value: Number(min_value), label: String(intToFloat(Number(min_value))) }, { value: Number(max_value), label: String(intToFloat(Number(max_value))) }]}\r\n        />\r\n      </ThemeProvider>\r\n    </Box >\r\n\r\n  );\r\n}\r\n\r\nexport default\r\n  withStreamlitConnection(VerticalSlider);","import React from \"react\"\r\nimport ReactDOM from \"react-dom\"\r\nimport MyComponent from \"./MyComponent\"\r\nimport config from './config.json';\r\n\r\nconsole.log(config)\r\nReactDOM.render(<MyComponent />,document.getElementById(\"root\"))\r\n"],"sourceRoot":""}