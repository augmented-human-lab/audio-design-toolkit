{"version":3,"sources":["MyComponent.jsx","index.tsx"],"names":["intToFloat","num","concat","toFixed","mixpanel","init","set_config","streamlitSetComponentValue","func","timer","timeout","arguments","length","undefined","_len","args","Array","_key","clearTimeout","setTimeout","apply","debounce","newValue","label","interface_name","track","Streamlit","setComponentValue","withStreamlitConnection","props","_props$args","example","min_value","max_value","value","step","track_color","thumb_color","theme","_useState","useState","_useState2","_slicedToArray","state","setState","useEffect","setFrameHeight","snowflakeTheme","createTheme","overrides","MuiSlider","root","height","fontSize","marginBottom","fontWeight","fontFamily","font","markLabel","color","textColor","paddingLeft","markLabelActive","markActive","opacity","valueLabel","thumb","marginLeft","primaryColor","width","borderRadius","borderWidth","rail","React","createElement","Box","sx","marginRight","paddingTop","ThemeProvider","style","wordBreak","textAlign","Slider","aria-label","min","max","onChange","_","valueLabelDisplay","valueLabelFormat","f","orientation","aria-labelledby","ThumbComponent","marks","Number","String","ReactDOM","render","MyComponent","document","getElementById"],"mappings":"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","file":"static/js/main.e5a50fc3.chunk.js","sourcesContent":["import {\n  Streamlit,\n  withStreamlitConnection,\n} from \"streamlit-component-lib\"\nimport React, { useEffect, useState } from \"react\"\nimport Box from '@material-ui/core/Box'\nimport { createTheme } from '@material-ui/core/styles';\nimport { Slider } from \"@material-ui/core\";\nimport { ThemeProvider } from '@material-ui/styles';\nimport mixpanel from 'mixpanel-browser';\nmixpanel.init('12ae1c3ca5383e7c343f126061a9da67')\nmixpanel.set_config({'persistence': 'localStorage'});\n\nfunction isInt(n) {\n  return n % 1 === 0;\n}\n\nfunction intToFloat(num) {\n  return isInt(num) ? `${num > 0 ? '+' : ''}${num.toFixed(1)}` : `${num > 0 ? '+' : ''}${num}`;\n}\n\nconst debounce = (func, timeout = 1000) => {\n  let timer;\n  return (...args) => {\n    clearTimeout(timer);\n    timer = setTimeout(() => {\n      func.apply(this, args);\n    }, timeout);\n  };\n};\n\nconst streamlitSetComponentValue = debounce((newValue, label, interface_name) => {\n  // window.parent.dataLayer = window.parent.dataLayer || [];\n  // console.log(window.parent.dataLayer)\n  // function gtag() {\n  //   window.parent.dataLayer.push(arguments)\n  //   // dataLayer.push(arguments)\n  // }\n  // gtag('js', new Date());\n  // gtag('config', 'G-PBGSXXLQ12');\n  // gtag('event', 'parameter_change', {\n  //   'app_name': 'myAppName',\n  //   'screen_name': 'Home',\n  //   'elementId': newValue,\n  //   'value': newValue\n  // });\n\n  mixpanel.track('parameter_change', {\n    'app_name': interface_name,\n    'label': label,\n    'value': newValue\n  });\n  \n  return Streamlit.setComponentValue(newValue)\n}, 500)\n\nconst VerticalSlider = (props) => {\n  const { interface_name, label, example, min_value, max_value, value, step, track_color, thumb_color } = props.args;\n  // const [min_value, max_value, value, step, track_color, slider_color, thumb_color] = [-5, 5, 0, 0.01, \"gray\", \"red\", \"black\"];\n  const theme = props.theme\n  // const theme = {\n  //   font: 'Serif',\n  //   textColor: 'black'\n  // }\n  const [state, setState] = useState(value)\n  useEffect(() => Streamlit.setFrameHeight());\n  useEffect(() => {\n    setState(value)\n    Streamlit.setComponentValue(value)\n  }, [example, value])\n  const handleChange = (_, newValue) => {\n    setState(newValue);\n    streamlitSetComponentValue(newValue, label, interface_name);\n  };\n\n  // if (state !== value) {\n  //   setState(value)\n  // }\n\n  const snowflakeTheme = createTheme({\n    overrides: {\n      MuiSlider: {\n        root: {\n          height: 200,\n          fontSize: 10,\n          marginBottom: 0,\n          fontWeight: 400,\n          fontFamily: theme.font\n        },\n        markLabel: {\n          color: theme.textColor,\n          fontFamily: theme.font,\n          paddingLeft: 15,\n          fontSize: 14\n        },\n        markLabelActive: {\n          color: theme.textColor,\n          fontFamily: theme.font,\n          paddingLeft: 15,\n          fontSize: 14\n        },\n        markActive: {\n          opacity: 0\n        },\n        valueLabel: {\n          fontFamily: theme.font,\n        },\n        thumb: {\n          color: thumb_color,\n          marginLeft: \"4px !important\"\n        },\n        track: {\n          color: theme.primaryColor,\n          width: \"10px !important\",\n          marginLeft: \"5px !important\",\n          borderRadius: 2,\n          marginBottom: 0,\n          borderWidth: 1\n        },\n        rail: {\n          color: track_color,\n          width: \"10px !important\",\n          marginLeft: \"5px !important\",\n          borderRadius: 2,\n          marginBottom: 0\n        }\n      }\n    }\n  });\n  // return <>a</>\n\n  return (\n    <Box sx={{ height: 200, marginRight: 10, marginLeft: 10, paddingTop: 10 }}>\n      <ThemeProvider theme={snowflakeTheme}>\n        <p style={{\n          wordBreak: \"break-word\",\n          fontSize: 14,\n          marginBottom: '1rem',\n          fontFamily: theme.font,\n          color: theme.textColor,\n          // lineHeight: '32px',\n          height: '32px',\n          textAlign: 'center'\n        }}>{label}</p>\n        <Slider\n          aria-label=\"Always visible\"\n          min={min_value}\n          step={step}\n          max={max_value}\n          value={state}\n          onChange={handleChange}\n          valueLabelDisplay=\"on\"\n          valueLabelFormat={min_value >= 0 ? f => f : intToFloat}\n          orientation=\"vertical\"\n          aria-labelledby=\"continuous-slider\"\n          ThumbComponent=\"span\"\n          marks={[{ value: Number(min_value), label: String(intToFloat(Number(min_value))) }, { value: Number(max_value), label: String(intToFloat(Number(max_value))) }]}\n        />\n      </ThemeProvider>\n    </Box >\n\n  );\n}\n\nexport default\n  withStreamlitConnection(VerticalSlider);","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport MyComponent from \"./MyComponent\"\n\nReactDOM.render(<MyComponent />,document.getElementById(\"root\"))\n"],"sourceRoot":""}