{"version":3,"sources":["MyComponent.jsx","index.tsx"],"names":["intToFloat","num","concat","toFixed","streamlitSetComponentValue","func","timer","timeout","arguments","length","undefined","_len","args","Array","_key","clearTimeout","setTimeout","apply","debounce","newValue","window","dataLayer","push","gtag","Streamlit","setComponentValue","withStreamlitConnection","props","_props$args","label","example","min_value","max_value","value","step","track_color","thumb_color","theme","_useState","useState","_useState2","_slicedToArray","state","setState","useEffect","setFrameHeight","snowflakeTheme","createTheme","overrides","MuiSlider","root","height","fontSize","marginBottom","fontWeight","fontFamily","font","markLabel","color","textColor","paddingLeft","markLabelActive","markActive","opacity","valueLabel","thumb","marginLeft","track","primaryColor","width","borderRadius","borderWidth","rail","React","createElement","Box","sx","marginRight","paddingTop","ThemeProvider","style","wordBreak","textAlign","Slider","aria-label","min","max","onChange","_","valueLabelDisplay","valueLabelFormat","f","orientation","aria-labelledby","ThumbComponent","marks","Number","String","ReactDOM","render","MyComponent","document","getElementById"],"mappings":"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","file":"static/js/main.676b58a3.chunk.js","sourcesContent":["import {\r\n  Streamlit,\r\n  withStreamlitConnection,\r\n} from \"streamlit-component-lib\"\r\nimport React, { useEffect, useState } from \"react\"\r\nimport Box from '@material-ui/core/Box'\r\nimport { createTheme } from '@material-ui/core/styles';\r\nimport { Slider } from \"@material-ui/core\";\r\nimport { ThemeProvider } from '@material-ui/styles';\r\n\r\nfunction isInt(n) {\r\n  return n % 1 === 0;\r\n}\r\n\r\nfunction intToFloat(num) {\r\n  return isInt(num) ? `${num > 0 ? '+' : ''}${num.toFixed(1)}` : `${num > 0 ? '+' : ''}${num}`;\r\n}\r\n\r\nconst debounce = (func, timeout = 1000) => {\r\n  let timer;\r\n  return (...args) => {\r\n    clearTimeout(timer);\r\n    timer = setTimeout(() => {\r\n      func.apply(this, args);\r\n    }, timeout);\r\n  };\r\n};\r\n\r\nconst streamlitSetComponentValue = debounce(newValue => {\r\n  window.dataLayer = window.dataLayer || [];\r\n  function gtag() {\r\n    window.dataLayer.push(arguments)\r\n  }\r\n  gtag('event', 'parameter_change', {\r\n    'app_name': 'myAppName',\r\n    'screen_name': 'Home',\r\n    'elementId': newValue,\r\n    'value': newValue\r\n  });\r\n  return Streamlit.setComponentValue(newValue)\r\n}, 500)\r\n\r\nconst VerticalSlider = (props) => {\r\n  const { label, example, min_value, max_value, value, step, track_color, thumb_color } = props.args;\r\n  // const [min_value, max_value, value, step, track_color, slider_color, thumb_color] = [-5, 5, 0, 0.01, \"gray\", \"red\", \"black\"];\r\n  const theme = props.theme\r\n  // const theme = {\r\n  //   font: 'Serif',\r\n  //   textColor: 'black'\r\n  // }\r\n  const [state, setState] = useState(value)\r\n  useEffect(() => Streamlit.setFrameHeight());\r\n  useEffect(() => {\r\n    setState(value)\r\n    Streamlit.setComponentValue(value)\r\n  }, [example, value])\r\n  const handleChange = (_, newValue) => {\r\n    setState(newValue);\r\n    streamlitSetComponentValue(newValue);\r\n  };\r\n\r\n  // if (state !== value) {\r\n  //   setState(value)\r\n  // }\r\n\r\n  const snowflakeTheme = createTheme({\r\n    overrides: {\r\n      MuiSlider: {\r\n        root: {\r\n          height: 200,\r\n          fontSize: 10,\r\n          marginBottom: 0,\r\n          fontWeight: 400,\r\n          fontFamily: theme.font\r\n        },\r\n        markLabel: {\r\n          color: theme.textColor,\r\n          fontFamily: theme.font,\r\n          paddingLeft: 15,\r\n          fontSize: 14\r\n        },\r\n        markLabelActive: {\r\n          color: theme.textColor,\r\n          fontFamily: theme.font,\r\n          paddingLeft: 15,\r\n          fontSize: 14\r\n        },\r\n        markActive: {\r\n          opacity: 0\r\n        },\r\n        valueLabel: {\r\n          fontFamily: theme.font,\r\n        },\r\n        thumb: {\r\n          color: thumb_color,\r\n          marginLeft: \"4px !important\"\r\n        },\r\n        track: {\r\n          color: theme.primaryColor,\r\n          width: \"10px !important\",\r\n          marginLeft: \"5px !important\",\r\n          borderRadius: 2,\r\n          marginBottom: 0,\r\n          borderWidth: 1\r\n        },\r\n        rail: {\r\n          color: track_color,\r\n          width: \"10px !important\",\r\n          marginLeft: \"5px !important\",\r\n          borderRadius: 2,\r\n          marginBottom: 0\r\n        }\r\n      }\r\n    }\r\n  });\r\n  // return <>a</>\r\n\r\n  return (\r\n    <Box sx={{ height: 200, marginRight: 10, marginLeft: 10, paddingTop: 10 }}>\r\n      <ThemeProvider theme={snowflakeTheme}>\r\n        <p style={{\r\n          wordBreak: \"break-word\",\r\n          fontSize: 14,\r\n          marginBottom: '1rem',\r\n          fontFamily: theme.font,\r\n          color: theme.textColor,\r\n          // lineHeight: '32px',\r\n          height: '32px',\r\n          textAlign: 'center'\r\n        }}>{label}</p>\r\n        <Slider\r\n          aria-label=\"Always visible\"\r\n          min={min_value}\r\n          step={step}\r\n          max={max_value}\r\n          value={state}\r\n          onChange={handleChange}\r\n          valueLabelDisplay=\"on\"\r\n          valueLabelFormat={min_value >= 0 ? f => f : intToFloat}\r\n          orientation=\"vertical\"\r\n          aria-labelledby=\"continuous-slider\"\r\n          ThumbComponent=\"span\"\r\n          marks={[{ value: Number(min_value), label: String(intToFloat(Number(min_value))) }, { value: Number(max_value), label: String(intToFloat(Number(max_value))) }]}\r\n        />\r\n      </ThemeProvider>\r\n    </Box >\r\n\r\n  );\r\n}\r\n\r\nexport default\r\n  withStreamlitConnection(VerticalSlider);","import React from \"react\"\r\nimport ReactDOM from \"react-dom\"\r\nimport MyComponent from \"./MyComponent\"\r\n\r\nReactDOM.render(<MyComponent />,document.getElementById(\"root\"))\r\n"],"sourceRoot":""}